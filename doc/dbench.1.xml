<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<refentry id="dbench.1">

<refmeta>
	<refentrytitle>dbench</refentrytitle>
	<manvolnum>1</manvolnum>
	<refmiscinfo class="source">dbench</refmiscinfo>
	<refmiscinfo class="manual">dbench: a multiprotocol loadtester.</refmiscinfo>
</refmeta>


<refnamediv>
	<refname>dbench</refname>
        <refpurpose>Utility to perform loadtesting for multiple protocols.</refpurpose>
</refnamediv>

<refsynopsisdiv>
	<cmdsynopsis>
		<command>dbench [ OPTIONS ] &lt;num-clients&gt;</command>
	</cmdsynopsis>
	
	<cmdsynopsis>
		<command>dbench</command>
		<arg choice="opt">-B --backend=&lt;backend&gt;</arg>
		<arg choice="opt">-t --timelimit=&lt;seconds&gt;</arg>
		<arg choice="opt">--warmup=&lt;seconds&gt;</arg>
		<arg choice="opt">-c --loadfile=&lt;filename&gt;</arg>
		<arg choice="opt">-R --targe-trate=&lt;throughput&gt;</arg>
		<arg choice="opt">--trunc-io=&lt;size&gt;</arg>
		<arg choice="opt">--run-once</arg>
		<arg choice="opt">--skip-cleanup</arg>
		<arg choice="opt">--machine-readable</arg>

		<arg choice="opt">--iscsi=&lt;iSCSI url&gt;</arg>
		<arg choice="opt">--iscsi-initiatorname=&lt;iqn name&gt;</arg>

		<arg choice="opt">--nfs=&lt;nfs url&gt;</arg>
		<arg choice="opt">--enable-nlm</arg>

		<arg choice="opt">--smb-share=&lt;//SERVER/SHARE&gt;</arg>
		<arg choice="opt">--smb-user=&lt;user%password&gt;</arg>

		<arg choice="opt">--scsi=&lt;device&gt;</arg>
		<arg choice="opt">--allow-scsi-writes</arg>
	</cmdsynopsis>
	
</refsynopsisdiv>

  <refsect1><title>DESCRIPTION</title>
    <para>
      Dbench is a utility to loadtest network server. Dbench currently supports
      iSCSI, NFSv3, SCSI and SMB.
    </para>
  </refsect1>

  <refsect1><title>OPTIONS</title>
    <variablelist>
      <varlistentry><term>-B --backend=&lt;iscsi|nfs|scsi|smb&gt;</term>
        <listitem>
          <para>
	    This specifies which protocol to test with. Supported protocols
	    are iscsi, nfsv3, scsi and smbv1
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>-t --timelimit=&lt;seconds&gt;</term>
        <listitem>
          <para>
	    For how long to run the test. This argument is mutually exclusive
	    with --run-once.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--warmup=&lt;seconds&gt;</term>
        <listitem>
          <para>
	    Before starting to record throughput and latencies dbench will
	    first wait until all clients are running and then wait for the
	    target and its caches to warm up before it starts collecting
	    data.
	  </para>
          <para>
	    Setting warmup to 0 means not warmup and dbench will start running
	    the test immediately.
	  </para>
        </listitem>
      </varlistentry>


      <varlistentry><term>-c --loadfile=&lt;filename&gt;</term>
        <listitem>
          <para>
	    The loadfile is the script for the commands to run during the test.
	    This command is mandatory.
	  </para>
          <para>	    The loadfile is the script for the commands to run during the test.
	    This command is mandatory.
	    The content of this file depends on the backend protocol that is
	    beeing tested. See the protocol specific sections below for
	    the commands that apply to the backends.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>-R --targetrate=&lt;throughput&gt;</term>
        <listitem>
          <para>
	    If the target rate is used dbench will try to keep each client
	    running at the indicated throughput rate by adjusting a 
	    delta that the dbench thread will sleep between commands.
	  </para>
          <para>
	    This is mainly useful for capacity testing of a known workload.
	    By using this argument it is possible to run each thread to match
	    the timings for the specific workload. By increasing the number of
	    threads until the target can no longer keep up it is possible
	    to measure how many clents/threads the target can service before
	    it becomes saturated and it can no longer keep up.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--trunc-io=&lt;integer&gt;</term>
        <listitem>
          <para>
	    Some targets may have limits on the size of I/O they can accept.
	    This argument will clamp all I/O read from the loadfile to not
	    exceed this value. This is mainly useful for using generic loadfiles
	    against targets that can not handle the I/O size.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--run-once</term>
        <listitem>
          <para>
	    Run the workload exactly once for each thread and exit the test
	    once all threads have finished. This option is mutualy exclusive
	    with --timelimit.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--skip-cleanup</term>
        <listitem>
          <para>
	    When the test is finished dbench will try to clean up the export
	    used by recursively deleting the "/clients" directory tree.
	    If you don't use "/clients/client*" style filenames or if you
	    don't want dbench to delete the files after the test is complete
	    use --skip-cleanup.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--machine-readable</term>
        <listitem>
          <para>
	    Output data during in a more machine friendly format.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--iscsi=&lt;iSCSI url&gt;</term>
        <listitem>
          <para>
	    iSCSI url for the target to connect to. The url format is :
	    iscsi://[&lt;username&gt;[%&lt;password&gt;]@]&lt;host&gt;[:&lt;port&gt;]/&lt;target-iqn&gt;/&lt;lun&gt;
	  </para>

	  <para>
	    Username and password are only required if the target requires CHAP
	    authentication. Optionally you can specify the username and
	    password using the environment variables LIBISCSI_CHAP_USERNAME and
	    LIBISCSI_CHAP_PASSWORD.
	  </para>

	  <para>
	    Host can be specified either as a hostname, an IPv4 address or an
	    IPv6 address.

	    Examples:
	    <screen format="linespecific">
	      iscsi://192.0.2.1/iqn.ronnie.test/1
	      iscsi://[2001:DB8::1]:3261/iqn.ronnie.test/1
	      iscsi://ronnie%password@iscsi.example.com/iqn.ronnie.test/1
	    </screen>
	  </para>
          <para>
	    This argument is only valid with iSCSI backend.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--iscsi-initiatorname=&lt;iqn name&gt;</term>
        <listitem>
          <para>
	    iSCSI initatorname to use when connecting to the target.
	  </para>
          <para>
	    This argument is only valid with iSCSI backend.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--nfs=&lt;NFS url&gt;</term>
        <listitem>
          <para>
	    NFS url for the target to connect to. The url format is :
	    nfs://&lt;server&gt;/&lt;path-of-export&gt;
	  </para>
          <para>
	    If you have a cmultihomed or clustered nfs server you can specify
	    a comma-separated list of nfs urls. Clients will then be distributed
	    across the different portals in round-robin fashin.
	  </para>
          <para>
	    This argument is only valid with NFS backend.
	  </para>
          <para>
	    <screen format="linespecific">
	      --nfs=nfs://10.0.0.1/data/tmp

	      --nfs=nfs://10.0.0.1/data/tmp,nfs://10.0.0.2/data/tmp
	    </screen>
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--enable-nlm</term>
        <listitem>
          <para>
	    This activates support for the NLM file locking protocol.
	    When this is enabled each client will connect a second connection
	    to the server for the NLM service, and the LOCK4, UNLOCK4 and TEST4
	    command become available.
	  </para>
          <para>
	    This argument is only valid with NFS backend.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--scsi=&lt;SCSI device&gt;</term>
        <listitem>
          <para>
	    Device name for the device to test.
	  </para>
          <para>
	    This argument is only valid with SCSI backend.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--allow-scsi-write</term>
        <listitem>
          <para>
	    Allow sending medium write commands to the device.
	  </para>
          <para>
	    This argument is only valid with SCSI backend.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--smb-share=&lt;//SERVER/SHARE&gt;</term>
        <listitem>
          <para>
	    Server and share to connect to for the SMB backend.
	  </para>
          <para>
	    This argument is only valid with SMB backend.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--smb-user=&lt;user%password&gt;</term>
        <listitem>
          <para>
	    Username and password to authenticate to the SMB server with.
	  </para>
          <para>
	    This argument is only valid with SMB backend.
	  </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>


  <refsect1><title>Common Loadfile Commands</title>
  <para>
    These commands are available for all backends and can be used to create
    loops, random file names and more.
  </para>
    <variablelist>
      <varlistentry><term>&lt;timing&gt; Deltree &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Deltree is used to recursively delete the file system tree used 
	    for the test. This command is commonly used as the very first
	    command in the loadfile and then to delete any residual files
	    that might be still present from a previous failed test run.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
# DELTREE if we want to delete the client directory everytime we restart 
# the script. Remove these two lines if the script is only "read-only"
# reading from pre-existing files in the /clients/clientX/ tree
0.000 Deltree "/clients/client1" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>LOOP &lt;count&gt; / ENDLOOP</term>
      <para>
	LOOP and ENDLOOP can be used to interate a set number of times of a
	range of commands in the loadfile. LOOP/ENDLOOP can nest.
      </para>
        <listitem>
          <para>
	    Example:
	    <screen format="linespecific">
RANDOMSTRING 1 "/test[0123456789][01234567890].file"
#
# The LOOP/ENDLOOP construct will loop over an entire section of
# the loadfile
#
LOOP 5
CREATE3 $1 *
LOOKUP3 $1 0x00000000
WRITE3 $1 0 1024 0 0x00000000
WRITE3 $1 1024 1024 0 0x00000000
ENDLOOP
	    </screen>
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>RANDOMSTRING &lt;index&gt; &lt;string&gt;</term>
        <listitem>
          <para>
	    RANDOMSTRING is used to create random strings, for example
	    strings that are to be used as randomly generated filenames.
	    The string is formed by replacing every occurance of
	    [&lt;set&gt;] with one randomly picked letter from the specified
	    set.
	  </para>
	  <para>
	    The string index must be a number from 1 to 9 and it can later
	    be referenced from file-name manipulating commands using
	    $&lt;number&gt;.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>REPEAT &lt;count&gt;</term>
        <listitem>
	  <para>
	    REPEAT is used to interate over the following line the specified
	    number of times.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry><term>SETSP &lt;sp&gt; / WAITSP &lt;child&gt; &lt;sp&gt;</term>
      <para>
	SETSP and WAITSP are used to synchronize across multiple threads.
      </para>
      <para>
	SETSP is used to record to which sequence point that a client thread has
	reached. From a different client thread you can then use WAITSP
	to block until the other thread has reached a particular sequnce point.
      </para>
        <listitem>
          <para>
	    Example:
	    <screen format="linespecific">
thread0.load
============
# In a real loadfile, replace SLEEP with real commands
SLEEP 1000000
# register that we have now reached sequence point 1
SETSP 1
SLEEP 1000000
SETSP 2
SLEEP 1000000
SETSP 3

thread1.load
============
# Block until client 0 has reached sequence point 1
WAITSP 0 1
# Block until client 0 has reached sequence point 2
WAITSP 0 2
# Block until client 0 has reached sequence point 3
WAITSP 0 3

dbench -B nfs --nfs=nfs://127.0.0.1/data/tmp --loadfile=thread1.load,thread2.load --warmup=0 --skip-cleanup --enable-nlm --run-once 2
	    </screen>
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>SLEEP &lt;usecs&gt;</term>
      <para>
	Sleep for this many useconds.
      </para>
        <listitem>
          <para>
	    Example:
	    <screen format="linespecific">
# Sleep for one second
SLEEP 1000000
	    </screen>
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>WRITEPATTERN &lt;count&gt;</term>
      <para>
	WRITEPATTERN is used to specify the data to write. This is a string
	of characters that will be repeated to fill the buffer to be written.
      </para>
        <listitem>
          <para>
	    Example:
	    <screen format="linespecific">
MKDIR3 "/clients" *
MKDIR3 "/clients/client1" *
LOOKUP3 "/clients/client1" 0x00000000
#
#
# Writepattern sets the pattern to write. This pattern is repeated
# to fill the write buffer.
#
WRITEPATTERN 1234567890
CREATE3  "/clients/client1/test.file" 0x00000000
WRITE3 "/clients/client1/test.file" 0 32768 0 0x00000000
REPEAT 1000
WRITE3 "/clients/client1/test.file" +32768 32768 0 0x00000000
COMMIT3 "/clients/client1/test.file" 0x00000000
	    </screen>
	  </para>
        </listitem>
      </varlistentry>
  
    </variablelist>
  </refsect1>


  <refsect1><title>Loadfile value modifiers</title>
  <para>
    Loadfile arguments can be specified either as absolute numbers or as simple
    expressions.
    <screen format="linespecific">
The modifiers are:
'*' followed by zero or more qualifiers :

'*'    : A random 64 bit integer.
'/yyy' : align the number to yyy. This is the same as x = (x/y)*y
'%yyy' : modulo yyy. This is the same as x = x%y
'+yyy' : Add y

Examples :
'*'         A random offset between 0 and file size.
'*/0x1000'  A random offset aligned to a page boundary (4096).
'*/0x1000%5000000' A random offset between 0 and 500000 aligned to page boundary.
'*%100+25'  A random offset between 25 and 124.

You can also use '+' on its own which means to take the previous value and just adding an offset to it :
Examples :
'+4096'    Take the previous value for this argument and add 4096 to it.
'+child'   Take the previous value for this argument and add the child id to it.
'+num_childred' Take the previous value for this argument and add the number of childred to it.

Example: Sequential read of 100x 4kb
READ3 "/foo.dbench" 0 4096 0x00000000
REPEAT 99
READ3 "/foo.dbench" +4096 4096 0x00000000
    </screen>
  </para>
  <para>
  </para>
  </refsect1>

  <refsect1><title>NFS Loadfile Commands</title>
    <variablelist>
      <varlistentry><term>&lt;timing&gt; ACCESS3 &lt;path&gt; 0 0 &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 ACCESS3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 ACCESS3 "/" 0 0 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; COMMIT3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 COMMIT3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 COMMIT3 "/some-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; CREATE3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 CREATE3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 CREATE3 "/some-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; FSINFO3 &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 FSINFO3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 FSINFO3 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; FSSTAT3 &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 FSSTAT3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 FSSTAT3 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; GETATTR3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 GETATTR3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 GETATTR3 "/some-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; LINK3 &lt;path&gt; &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 LINK3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 LINK3 "/hard-link" "/original-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; LOOKUP3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 LOOKUP3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 LOOKUP3 "/some-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; MKDIR3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 MKDIR3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 MKDIR3 "/some-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; PATHCONF3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 PATHCONF3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 PATHCONF3 "/some-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; READDIRPLUS3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 READDIRPLUS3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 READDIRPLUS3 "/some-directory" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; READ3 &lt;path&gt; &lt;offset&gt; &lt;length&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 READ3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 READ3 "/some-file" 0 4096 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; READLINK3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 READLINK3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 READLINK3 "/some-link" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; REMOVE3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 REMOVE3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 REMOVE3 "/some-directory" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; RENAME3 &lt;old-path&gt; &lt;new-path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 RENAME3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 RENAME3 "/old-name" "/new-name"  0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; RMDIR3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 RMDIR3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 RMDIR3 "/some-directory" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; SETATTR3 &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 SETATTR3 command to the server to force an update
	    of the inode. (set mtime to server time)
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 SETATTR3 "/some-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; SYMLINK3 &lt;path&gt; &lt;path&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 SYMLINK3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 SYMLINK3 "/sym-link" "/original-file" 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; WRITE3 &lt;path&gt; &lt;offset&gt; &lt;length&gt; &lt;stable&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NFSv3 WRITE3 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 WRITE3 "/some-file" 0 4096 2 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; LOCK4 &lt;path&gt; &lt;offset&gt; &lt;length&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NLMv4 LOCK4 command to the server.
	  </para>
          <para>
	    <screen format="linespecific">
Example:
0.000 LOCK4 "/some-file" 0 4096 0x00000000


Example: Hammer the lock server to death
UNLOCK4 "/foo.dbench" 0 0 0x00000000
LOCK4 "/foo.dbench" +child 1 0x00000000
REPEAT 10000000
LOCK4 "/foo.dbench" +num_children 1 0x00000000
UNLOCK4 "/foo.dbench" 0 0 0x00000000

dbench -B nfs --nfs=nfs://10.0.0.1/data/tmp,nfs://10.0.0.2/data/tmp --loadfile=nfs.load --warmup=0 --skip-cleanup --enable-nlm --run-once 10
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; UNLOCK4 &lt;path&gt; &lt;offset&gt; &lt;length&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NLMv4 UNLOCK4 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 UNLOCK4 "/some-file" 0 4096 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; TEST4 &lt;path&gt; &lt;offset&gt; &lt;length&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a NLMv4 TEST4 command to the server.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 TEST4 "/some-file" 0 4096 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1><title>NFS Examples</title>
    <variablelist>
      <varlistentry><term>Sequential 4kb Reads</term>
      <para>
	To read a file sequentially 4kbyte at a time:
	<screen format="linespecific">
READ3 "/foo.dbench" 0 4096 0x00000000
REPEAT 999999
READ3 "/foo.dbench" +4096 4096 0x00000000

dbench -B nfs --loadfile=nfs.load --skip-cleanup --warmup=0 --nfs nfs://127.0.0.1/data/tmp --run-once 1
	</screen>
      </para>
      </varlistentry>

      <varlistentry><term>Random 4kb Reads</term>
      <para>
	To read a file randomly 4kbyte at a time within the range 0 to 1G :
	<screen format="linespecific">
REPEAT 999999
READ3 "/foo.dbench" */4096%1000000000 4096 0x00000000

dbench -B nfs --loadfile=nfs.load --skip-cleanup --warmup=0 --nfs nfs://127.0.0.1/data/tmp --run-once 1
	</screen>
      </para>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1><title>iSCSI Loadfile Commands</title>
    <variablelist>
      <varlistentry><term>&lt;timing&gt; TESTUNITREADY &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a TESTUNITREADY command.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
	      0.000 TESTUNITREADY 0x00000000
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; READ10 &lt;LBA&gt; &lt;TL&gt; &lt;flags&gt; &lt;group&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a READ10 command.
	  </para>
          <para>
	    Group is useful if you have a target that can report statistics for
	    individual groups. If your target can not report statistics per
	    group you probably want to leave this as 0 for all commands that
	    take a group id.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
# timestamp READ10 lba tl flags group status
#   if lba is * this means to use a random lba
#
#   rd is :
#     3 bits     0xe0 : RDPROTECT
#     1 bit      0x10 : DPO
#     1 bit      0x08 : FUA
#     1 bit      0x02 : FUA_NV
0.000 READ10    0 2 0 0 0x00
0.000 READ10    2 2 0 0 0x00
0.000 READ10    4 2 0 0 0x00
0.000 READ10    6 2 0 0 0x00
0.000 READ10    * 2 0 0 0x00
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; READ16 &lt;LBA&gt; &lt;TL&gt; &lt;flags&gt; &lt;group&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a READ16 command. See READ10 for arguments.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; WRITE10 &lt;LBA&gt; &lt;TL&gt; &lt;flags&gt; &lt;group&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a WRITE10 command.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
# timestamp WRITE10 lba tl flags group status
# WRITES are ignored by default and must be activated using
# --allow-scsi-writes
#
#   flags are cdb byte#1 in SBC:
#     a value of 0x06 will force the data to be written to the
#     medium
#     a value of 0x00 allow the device to only write to nv-ram
#     and not medium
0.000 WRITE10 5000 1 0x06 0 0x00
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; WRITE16 &lt;LBA&gt; &lt;TL&gt; &lt;flags&gt; &lt;group&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a WRITE16 command. See WRITE10 for arguments.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; READCAPACITY10 &lt;LBA&gt; &lt;PMI&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a READCAPACITY10 command.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
# timestamp READCAPACITY10 lba pmi(0/1) sense
0.000 READCAPACITY10 0 0 0x00
	    </screen>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>&lt;timing&gt; SYNCHRONIZECACHE10 &lt;LBA&gt; &lt;TL&gt; &lt;SYNCNV&gt;  &lt;IMMED&gt; &lt;status&gt;</term>
        <listitem>
          <para>
	    Send a SYNCHRONIZECACHE10 command.
	  </para>
          <para>
	    Example:
	    <screen format="linespecific">
# timestamp SYNCHRONIZECACHE10 lba numblocks syncnv immed sense
0.000 SYNCHRONIZECACHE10 0 0 1 1 0x00
	    </screen>
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1><title>iSCSI Examples</title>
    <variablelist>
      <varlistentry><term>Examples</term>
      <para>
	See the loadfiles directory for iscsi examples.
      </para>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1><title>SEE ALSO</title>
    <para>
      dbench(1)
      <ulink url="http://github.com/sahlberg/dbench"/>
    </para>
  </refsect1>

</refentry>
